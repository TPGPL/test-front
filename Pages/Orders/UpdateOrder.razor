@page "/orders/update/{Id:int}"
@inject IOrderService service
@inject NavigationManager navManager

<PageTitle>Update order</PageTitle>

<h3>Update order @Id</h3>

@if (order is null)
{
    <p>@message</p>
} else
{
    if (updateMessage is not null)
    {
        <p class="alert alert-danger">Error: @updateMessage</p>
    }
    
    <OrderForm order="order" OnValidSubmit="HandleSubmit" />
}

@code {
    [Parameter]
    public int Id { get; set; }
    private Order? order;
    private String? message = "Loading...";
    private String? updateMessage;

    protected override async Task OnInitializedAsync()
    {
        var response = await service.GetOrderAsync(Id);

        if (!response.Success)
        {
            message = response.Message ?? "Failed to get order.";
            return;
        }

        order = response.Data;
    }

    public async Task HandleSubmit()
    {
        if (order is null)
        {
            return;    
        }

        var response = await service.UpdateOrderAsync(Id, order);

        if (!response.Success)
        {
            updateMessage = response.Message ?? "Failed to update order.";
            return;
        }

        navManager.NavigateTo("/orders");
    }
}
