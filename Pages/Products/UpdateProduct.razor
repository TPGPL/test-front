@page "/products/{Id:int}"
@inject IProductService service
@inject NavigationManager navManager

<PageTitle>Update product</PageTitle>

<h3>Update product @Id</h3>

@if (product is null)
{
    <p>@message</p>
} else
{
    if (updateMessage is not null)
    {
        <p class="alert alert-danger">Error: @updateMessage</p>
    }

    <ProductForm product="product" OnValidSubmit="HandleSubmit" />
}

@code {
    [Parameter]
    public int Id { get; set; }
    private Product? product;
    private String? message = "Loading...";
    private String? updateMessage;

    protected override async Task OnInitializedAsync()
    {
        var response = await service.GetProductAsync(Id);

        if (!response.Success)
        {
            message = response.Message ?? "Failed to get product.";
            return;
        }

        product = response.Data;
    }

    public async Task HandleSubmit()
    {
        if (product is null)
        {
            return;    
        }

        var response = await service.UpdateProductAsync(Id, product);

        if (!response.Success)
        {
            updateMessage = response.Message ?? "Failed to update product.";
            return;
        }

        navManager.NavigateTo("/products");
    }
}
