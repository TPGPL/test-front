@page "/products"
@inject IProductService service
@inject NavigationManager manager

<PageTitle>Products</PageTitle>

<h3>Products</h3>

@if (products is null)
{
    <p>@message</p>
}
else
{
    <button class="btn btn-primary" @onclick="CreateAction">Create new product</button>

    @if (!products.Any())
    {
        <p>No data to show.</p>
    }
    else
    {
        <table class="table table-striped align-middle">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock quantity</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <th>@product.Id</th>
                        <td>@product.Name</td>
                        <td>@product.Price</td>
                        <td>@product.StockQuantity</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => UpdateAction(product.Id)">Update</button>
                            <button class="btn btn-danger" @onclick="() => DeleteAction(product.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}


@code {
    private List<Product>? products = null;
    private string? message = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await GetAction();
    }

    public void UpdateAction(int id)
    {
        manager.NavigateTo($"/products/{id}");
    }

    public void CreateAction()
    {
        manager.NavigateTo("/products/new");
    }

    public async Task DeleteAction(int id)
    {
        await service.DeleteProductAsync(id);
        await GetAction();
    }

    protected async Task GetAction()
    {
        var response = await service.GetProductsAsync();

        if (!response.Success)
        {
            message = response.Message ?? "Failed to get products.";
            return;
        }

        products = response.Data;
    }
}
